#
# Chaos monkey for booksapp
#
kind: ServiceAccount
apiVersion: v1
metadata:
  name: chaos
  labels:
    project: booksapp
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: booksapp:chaos
  labels:
    project: booksapp
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["delete", "get",  "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: booksapp:chaos
  labels:
    project: booksapp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: booksapp:chaos
subjects:
- kind: ServiceAccount
  name: chaos
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: chaos
  labels:
    project: booksapp
data:
  chaos: |-
    #!/bin/sh

    while true; do
      # Get the list of running pods that match the app label
      PODS=$(kubectl get pod --field-selector=status.phase=Running --selector='app in (authors, books, webapp)' -o jsonpath='{.items[*].metadata.name}')

      # Calculate the number of pods
      POD_COUNT=$(echo "${PODS}" | awk -F" " '{print NF}')

      # Check if there are any pods available
      if [ "$POD_COUNT" -eq 0 ]; then
        echo "No running pods found. Waiting..."
        sleep 30
        continue
      fi

      echo "Found ${POD_COUNT} running pods"

      # Select a random pod to delete
      RAND=$((RANDOM % POD_COUNT + 1))
      POD=$(echo $PODS | cut -d' ' -f$RAND)

      echo "Deleting pod: $POD"
      kubectl delete pod "$POD"

      # Wait before the next deletion
      sleep 30
    done
---
apiVersion: v1
kind: Pod
metadata:
  name: chaos
  labels:
    app: chaos
    project: booksapp
spec:
  serviceAccountName: chaos
  containers:
  - name: chaos
    image: lachlanevenson/k8s-kubectl:v1.10.3
    command: ["/data/chaos"]
    volumeMounts:
    - name: chaos
      mountPath: /data
  volumes:
  - name: chaos
    configMap:
      name: chaos
      defaultMode: 0744
  terminationGracePeriodSeconds: 0
